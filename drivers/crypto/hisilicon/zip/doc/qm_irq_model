qm irq logic
------------

-v0.1 2017.12.4 wangzhou init
-v1.0 2017.1.3  wangzhou update irq model
-v2.0 2017.1.25 wangzhou add irq support in sync and async interface


related hardware cfg:

Function interrupt mask: 0xc.(io)
c_flag in cqc: if writing cqe to EQE: 1 write; 0 not write.(cq doorbell, priority bit0 = 1)

After one cq writing eqe to eq, hardware sets cflag = 0 in related cqc.

After receiving one eqe, one irq will be triggered when irq umasked.


The whole interrupt model is as below:

  +---------------------------------------------------------------------+
  |                                                                     |
  |                                                           function  |
  |   +---+---+---+---+----                                             |
  |   |sqe|sqe|sqe|sqe|                                                 |
  |   +---+---+---+---+----                                             |
  |   +---+---+---+---+----                                             |
  |   |cqe|cqe|cqe|cqe|     \                                           |
  |   +---+---+---+---+----  \                                          |
  |         ^       ^         \                                         |
  |         |       |          \                                        |
  |        head    tail         \                                       |
  |                              \                                      |
  |                                +---+---+---+---+-----               |
  |   ...                          |eqe|eqe|eqe|eqe|...                 |
  |                              / +---+---+---+---+-----               |
  |                             /        ^       ^                      |
  |   +---+---+---+---+----    /         |       |                      |
  |   |sqe|sqe|sqe|sqe|       /         head    tail                    |  
  |   +---+---+---+---+----  /                                          |
  |   +---+---+---+---+---- /                                           |
  |   |cqe|cqe|cqe|cqe|    /                                            |
  |   +---+---+---+---+----                                             |
  |                                                                     |
  +---------------------------------------------------------------------+

1. Hardware is keeping write cqe to cq when a sqe is finished.

2. After hardare write a eqe to eq, cq disables itself to write eqes to eq.

3. After sending an interrupt, hardare masks itself interrupt.

4. Software should sent doorbell to set c_flag = 1 to enable cq writing eqe to eq.

5. Every time of eq doorbell, hardware unmask interrupt.


So an interrupt means there is at least one eqe in eq. And an eqe means there is
at least one cqe in cq.

So software handler for one interrupt can be: 

        1. first pick up the current head and tail of eq, during this handler,
           we only handle eqes in the range of [head, tail).

           (We should use phase in eqe to pick up eqes)

        2. parse all eqes in above range, get related cq/cqe.

        3. pick up the current head and tail of cq, only handle cqes in the
           range of [head, tail). update head of cq to the position of tail.

           (We should use phase in cqe to pick up cqes)

        4. after handling all cqes in all queues in one function, update head of
           eq to the position of tail.

	5. when parsing cqes, something need to be done for related sqe, which
	   is accelerator specific. a callback should offer to general interrupt
	   handler to do accelerator specific operations.

 From user's view, How to know a sqe is done?
 please see sync_async_interface

 According to above sync_async_interface. Interrupt handler should distinguish
 if a queue is used in kernel or in user space:

 For queue used in kernel:
 	cq head will be updated in irq handler. And for async interface,
	a callback wil be called in irq handler.

 For queue used in user space:
 	async interface need no interrupt support. sync interface should put
	a wake up function in irq handler.
